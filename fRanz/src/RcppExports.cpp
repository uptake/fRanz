// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// GetRdConsumer
SEXP GetRdConsumer(Rcpp::StringVector keys, Rcpp::StringVector values);
RcppExport SEXP _fRanz_GetRdConsumer(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(GetRdConsumer(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// RdSubscribe
int RdSubscribe(SEXP consumerPtr, const Rcpp::StringVector Rtopics);
RcppExport SEXP _fRanz_RdSubscribe(SEXP consumerPtrSEXP, SEXP RtopicsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type consumerPtr(consumerPtrSEXP);
    Rcpp::traits::input_parameter< const Rcpp::StringVector >::type Rtopics(RtopicsSEXP);
    rcpp_result_gen = Rcpp::wrap(RdSubscribe(consumerPtr, Rtopics));
    return rcpp_result_gen;
END_RCPP
}
// KafkaConsume
Rcpp::List KafkaConsume(SEXP consumerPtr, int numResults, int timeout);
RcppExport SEXP _fRanz_KafkaConsume(SEXP consumerPtrSEXP, SEXP numResultsSEXP, SEXP timeoutSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type consumerPtr(consumerPtrSEXP);
    Rcpp::traits::input_parameter< int >::type numResults(numResultsSEXP);
    Rcpp::traits::input_parameter< int >::type timeout(timeoutSEXP);
    rcpp_result_gen = Rcpp::wrap(KafkaConsume(consumerPtr, numResults, timeout));
    return rcpp_result_gen;
END_RCPP
}
// GetRdProducer
SEXP GetRdProducer(Rcpp::StringVector keys, Rcpp::StringVector values);
RcppExport SEXP _fRanz_GetRdProducer(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(GetRdProducer(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// KafkaProduce
int KafkaProduce(SEXP producer_pointer, SEXP topic, Rcpp::IntegerVector partition, Rcpp::StringVector keys, Rcpp::StringVector values);
RcppExport SEXP _fRanz_KafkaProduce(SEXP producer_pointerSEXP, SEXP topicSEXP, SEXP partitionSEXP, SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type producer_pointer(producer_pointerSEXP);
    Rcpp::traits::input_parameter< SEXP >::type topic(topicSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type partition(partitionSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(KafkaProduce(producer_pointer, topic, partition, keys, values));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_fRanz_GetRdConsumer", (DL_FUNC) &_fRanz_GetRdConsumer, 2},
    {"_fRanz_RdSubscribe", (DL_FUNC) &_fRanz_RdSubscribe, 2},
    {"_fRanz_KafkaConsume", (DL_FUNC) &_fRanz_KafkaConsume, 3},
    {"_fRanz_GetRdProducer", (DL_FUNC) &_fRanz_GetRdProducer, 2},
    {"_fRanz_KafkaProduce", (DL_FUNC) &_fRanz_KafkaProduce, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_fRanz(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
